// Code generated for package messages by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/phrases.txt
package messages

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPhrasesTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x57\xcd\x6e\xe4\xc8\x0d\xbe\x0b\xd0\x3b\x70\x4f\xde\x05\x7a\x1b\x48\xae\x3e\x2c\xec\xf6\xcc\xd8\x89\xbd\x76\x6c\x0f\x06\x39\x52\x12\x25\x55\xba\x54\xd4\xb0\xaa\xba\xad\x7d\xfa\x80\x2c\x75\xdb\xd9\x1d\xe4\xd8\x6a\xa9\x44\x7e\xfc\x7e\xa8\x6b\x94\xbd\x0b\x03\x7c\x9d\xe1\x75\x24\xf8\x26\x1c\x06\x78\x15\xa2\xba\x7a\x65\x98\x70\x4f\x80\x70\xb4\xab\x18\x63\x9e\xe6\xe4\x38\x00\x36\x9c\x13\x44\x9e\x28\x8d\x2e\x0c\xdb\xba\xfa\x9d\x7f\xbd\x16\x74\x81\xa4\xae\xae\xc2\x62\x97\x21\x8d\x98\x40\xe8\x7b\x76\x42\x11\x26\x17\xdc\x84\x1e\x1a\xbd\x0f\xb0\x4d\xee\xe0\xd2\x02\x89\x01\xdb\x96\xa7\xd9\xbb\x38\x6e\xeb\xea\x86\x8f\x01\x5e\x19\x3e\xa1\xa4\xb1\xae\x9e\x44\xef\x6c\xd1\x03\x0b\x8c\x79\x6a\x3c\x5d\x42\x0e\xb3\x50\xa2\x90\x1c\xe7\xb8\xad\xab\x6f\x23\x05\x48\x23\xc1\x73\x6e\x1a\x12\xb8\x75\x29\x96\xdf\x8c\xdd\xfa\xf7\xb9\x5a\x70\x71\x6d\x20\x31\x34\x34\xb8\xb0\x81\x81\x12\x44\x12\x3d\x6e\xa3\x2f\x9a\xcb\xbf\x7a\x44\xa2\x98\xb6\x75\xf5\x72\x74\x61\xd0\xa7\x3f\xb3\xd8\xf5\xcf\x14\x5a\x8a\x75\xf5\xc5\x1d\xf4\xf2\xfb\xf1\x0b\x67\x01\xf4\x7e\x5b\x57\xb7\x84\x5d\x84\xaf\x73\x5d\x7d\x8d\xd4\x01\x46\xc0\x00\xd8\x1d\x30\xb4\xd4\xc1\x11\x25\x28\x7a\xda\x6d\x43\x2d\x4f\x04\x7b\xa2\xe0\x17\xc0\x23\x0a\x6d\xeb\xea\xc9\xe3\xa2\x47\x3e\xb1\x62\xaf\x60\x68\xd7\x9d\x61\xab\xcf\x40\x47\xd8\x59\xc1\xa7\x9f\x2d\xb9\xd4\x67\xff\x83\x09\x5d\x67\x89\x09\xfe\xad\xc5\x5d\xe7\xa6\xf1\x65\xc2\x92\x5d\x81\x86\x03\x5d\x44\x18\x71\x9e\x17\x98\x78\xa2\xa0\x4d\x7f\xd3\xf9\x7f\x9d\x61\x87\xde\xeb\x5c\x81\xdb\x36\x8b\x56\x0f\xdc\x43\x64\x31\x98\x31\x41\x23\x2e\x0c\x11\x10\x66\xe1\xc6\xd3\xa4\xf5\xe8\xa9\x0d\x77\xcb\x45\x04\x4c\x65\x58\x01\x30\x74\x8a\xde\x02\x42\xe8\xdd\x1f\x04\x2e\x41\x20\xea\x22\xf4\xee\xad\x14\xfa\x99\x71\xd2\x0e\xaf\x92\x51\xf2\x81\xb3\xf2\xc0\x30\x02\x0a\x82\x83\x22\x19\x3a\x88\x23\x1f\xc1\x69\x99\xaf\x9c\x87\x11\xee\x12\x3c\xe6\x54\xba\xa2\x49\x39\x26\x14\x9d\xf7\x8e\x42\x02\x3a\x50\x00\x17\x60\x44\xe9\x20\xb9\x89\xe2\x25\x50\xe8\xb2\x94\x77\xde\x5a\xdf\x3a\x1f\xd8\x79\x9c\xea\x4a\xdf\x1c\x13\x26\x6b\xb4\x21\xad\xc7\xb0\xb9\x84\x9e\xc8\xeb\xcf\x8e\xbc\x1b\xc6\x44\x9d\x71\x36\x5c\x24\xb8\x67\xde\x03\xc2\x17\xd7\x27\xb8\x65\x89\x04\x77\xe1\x63\x0b\x46\xc3\x85\x33\x88\x8e\xe9\xa0\xca\x1a\xf4\xde\x5e\x78\x3a\xcd\x60\x03\x1d\x43\xe0\xa4\xcd\xe6\x30\x08\x26\xea\xb3\x52\xe9\x59\x5f\x06\x8f\x7d\x6f\xe4\xbb\xc6\x54\x57\x77\xd3\x44\x9d\xc3\x44\x7e\xd1\xc7\x02\x69\x83\x08\x63\x16\x59\x2e\xe1\xe8\xd2\xa8\x1c\xe8\xc8\xe3\xb2\xad\xab\x7f\x65\xd7\xee\xe1\xb1\xe8\xe4\x46\xf0\x58\x57\x4f\x24\x3d\x8b\x81\x8d\x45\x91\x1c\xec\x39\xbb\x67\x10\x42\x25\xbf\x22\x30\x62\x4c\x4a\xc8\x5b\x37\x8c\x70\x15\x3a\xb8\x91\xe5\x34\x13\x4f\xbd\x96\x3b\xba\xd0\x5d\x02\x36\x18\xb4\x94\x6e\x0b\xd7\x86\x5a\x29\x89\xfc\xec\x29\x46\x88\x2e\x65\x3c\xbf\x46\xcb\x43\x38\xa2\x99\x80\x50\xcb\x07\x92\x93\x03\xa8\xcc\x14\xbb\x1d\xe7\x90\xea\xea\xa5\xc0\xa3\x54\x7f\x57\x9a\x51\xcf\x33\xef\xe3\x99\xff\xbd\xd6\x5c\x24\x11\x08\xc5\x2f\x10\x79\x5b\x57\x0f\x0b\xec\xf2\xac\x9d\xbc\x12\xfe\xbf\xd3\xf4\x6a\xef\x42\x77\x3a\x11\x07\x21\xc2\xc6\xdb\xbd\xeb\xc8\xcb\x40\x6e\x84\xe7\x59\x9f\xbb\x77\x7b\x82\xcf\xde\xa9\x19\xbc\x32\xf4\xe8\x3d\x74\xda\x82\xf3\x7e\x95\x66\xe7\x6c\x36\x1e\x65\x20\x08\x79\x6a\x48\xd4\xb6\x1e\xb4\x37\x25\xea\x63\x36\x94\x11\x1e\xd8\xd3\xe8\x54\x6c\x8f\x81\xe0\x38\x32\x50\x6c\xd1\xeb\x1c\x20\x4e\x7a\xb2\xd5\x1a\x8b\x8e\xb2\x04\xb3\xb9\x09\x5c\xd0\x72\xdd\x70\xd2\x5f\x34\xf3\x60\x55\x90\x6b\xf7\x14\x22\xfc\xaa\x68\xd6\xd5\xd5\x87\x11\x58\xc3\x23\x46\x18\x58\xf5\x69\x83\x98\x58\xe8\xe4\x84\x5a\xbc\x0b\x89\x84\x62\x32\xc6\x67\x5a\x07\xa5\x8a\x32\xcb\xa6\x37\x97\x1c\xc5\x02\xce\x81\x3c\xcf\xea\x1c\xd1\x34\x39\x1b\xcb\x34\x10\x8c\x35\xdf\x33\x7a\x97\x96\x0d\xd0\x5b\x4b\x16\x23\xe8\x2f\xff\x04\xff\x45\x84\x03\xc9\x02\x07\xf4\x59\x41\x3f\x91\x41\x19\x67\xda\xfe\xf9\x6f\xbf\xc0\x15\x24\x92\x09\xb2\x3a\xaa\xb1\xab\x61\x73\x0e\xf8\xf9\xef\xbf\xc0\x69\xb2\x0a\x9d\xb6\xb6\xfa\xaa\x0b\x2d\xce\xd8\x3a\x55\x74\x77\x16\x83\x82\x78\xe3\x24\x29\x95\x0b\xac\x06\x09\x8a\x72\xe0\x4d\x1d\x5a\xb5\x60\x3a\x80\x38\x93\xf2\xaa\x51\xca\xaa\x4d\x08\xc5\xec\xd3\x06\x9c\x16\xad\xa8\x63\xe3\x17\x53\xee\xc0\xab\x3f\x1f\x59\xf6\xa5\x9f\x23\x59\x1c\xfc\x03\x8f\x51\xe7\x7c\xef\x7a\xd2\x48\xc8\xe8\xfd\xa2\x13\x8d\x20\xd4\x93\x58\xa2\x00\x42\x62\xf6\xa5\xbf\x46\x8d\x32\xb6\x99\x24\xc2\x71\x0d\xb9\x05\x66\x59\x14\xf1\x56\x59\x33\x93\x42\xd0\xa2\xf1\x2c\xe2\x81\x4c\xbb\xea\xd3\x33\x9a\x87\x5f\xc1\x93\xa3\x62\xd8\x3b\xdc\x1b\x05\x12\xc6\x7d\x69\xd5\xa9\x24\x75\x8e\x7f\x89\xe1\x4f\x56\xf8\xce\x73\xee\xe0\xd6\x3a\x7e\x71\xfe\x40\x02\xf7\x4e\x43\xeb\x24\x7e\x9e\x93\x9b\x5c\x4c\xae\xdd\x9c\x3d\xb6\x73\x7d\xef\xda\xec\x7d\x2a\x4e\xbb\xad\xab\x5d\x4e\x9a\x72\x26\xe8\x11\x63\xc9\x1e\x0d\xdd\x35\x64\x67\x76\x21\x6d\xc0\x13\x5a\x98\x9a\x31\xa8\x7a\x8a\xdb\xe5\x10\xa8\xa5\x18\x51\x16\xe8\x28\xa1\xf3\x7a\xe6\x3d\x25\xb8\x25\x81\x67\x37\x9b\x95\x4d\x2e\x46\xa3\x35\xab\x73\x4b\x32\x13\x70\x4a\xd4\xec\x3b\x98\x08\x03\x5c\x0c\xaa\xcf\x98\x48\x7e\xba\xa8\xab\x27\x94\x73\x9a\xef\x38\x8b\x96\xf5\x4d\x51\x51\x8f\x3e\xda\x53\xf4\x36\x53\x6b\x55\xaa\xfb\x53\xf8\x48\xd8\xc0\x32\x95\xb5\xa4\xe5\x69\xe2\xb0\xe6\x3d\x3c\x2a\x4a\xb7\x44\x3e\xd6\xd5\x67\xf4\x6b\x58\xd0\xec\x17\xf3\x00\x3e\x50\xe1\x15\x06\x4e\x23\x09\xcc\x24\xd1\x9e\x7e\x46\x83\x16\x76\x98\x8a\xc0\x6f\x78\x88\x6b\x6c\x38\x9b\x95\xac\x77\x8c\x8a\x93\x5f\x8a\x85\xa4\xf1\xd7\x23\x26\x12\x9b\xca\x0d\x79\xd7\xaa\x78\xff\x2c\xad\xd5\x27\xb5\x5d\x05\x20\x82\xf6\x93\xdc\x1f\x25\xff\x76\xb2\x94\xba\x5f\x66\xe7\x13\x3c\x38\xbf\xaf\xab\x3b\xa5\x76\x8e\x64\xce\x5d\xf8\x2c\xcb\x69\x75\xfa\xa0\x17\x40\x2f\x84\xdd\xb2\x62\xb4\xc6\x73\x8b\x61\xcd\xb1\x76\xc4\x30\x98\xec\xae\x02\x5c\xc9\x64\x7f\x23\xdc\xd3\x50\x9c\xf8\x43\x91\x2e\x02\xbd\x25\xa1\x89\xfc\x62\xe0\x87\xe8\x0e\x6a\x03\x9f\x3c\xcd\x23\x86\xa4\x10\x96\xc5\x8e\xa7\xba\xba\x1b\x02\x8b\xc5\x57\xf1\xd6\x0d\x70\x73\x30\xeb\x3a\xed\x21\x2c\xd0\xa3\xf3\xab\x22\xb1\xeb\x44\x9b\xc1\x00\x2e\x46\xb5\x33\x7d\x69\x4c\xa8\x86\xaf\x6d\x99\x9f\x4c\xf8\x1f\x16\x75\x43\xdb\x6b\xe1\xae\x8f\x1b\x75\xa0\xb2\x19\x5e\xe7\xa4\x73\x75\xc1\xc5\xb1\xbc\xd9\xd4\x74\x8a\xb3\x09\xf7\x25\x4e\xb5\xfc\x36\x47\x63\xff\xb3\xeb\x08\x6e\xdd\xb4\x81\x1d\x1f\x1b\x5e\x7e\x52\x11\xb6\x23\xd9\xf0\x59\xd5\xb7\x90\xf7\x1b\xc8\xab\x23\xe8\xd6\xcc\x1d\xf1\xaa\xf9\xd6\x1e\x8a\xe6\x4b\xad\x5f\xd7\xd0\x55\x38\x0d\xb6\x7b\xf3\x14\x4d\x92\x89\x3a\x18\x75\xf1\x30\xfb\x67\x8d\xa5\x1c\xe0\x2a\xd5\xd5\x43\x29\xab\xcf\xa1\x2c\x6e\x27\xd0\xd7\x00\xe4\x40\x97\x20\xae\x53\xd5\x2a\xda\x2f\x23\x27\x5d\x5e\x6c\x55\x40\xd9\xdb\xe4\x74\x89\x9b\xe6\xf4\x1e\x1b\xde\xa5\xe4\xcb\x78\x5b\x82\x5e\xcf\xca\xad\xea\x74\x5b\x57\x5f\xd8\xa4\x75\x2d\xbc\x5f\x17\x4d\x17\xf7\xca\x62\xd4\x46\x8b\x53\xf4\xfa\x5b\x75\x19\xc1\x73\xd4\x72\x48\x4d\xa7\x2c\xac\x6a\x17\x03\x17\x17\xc8\xe9\xc3\x2e\xac\xc7\xfe\x93\x68\x8e\x75\xf5\x82\xae\x3b\xd9\x62\x49\x45\xa1\xf7\xd5\xfe\xc3\x4e\xbf\x32\xfc\x1b\xfb\xfe\x3d\xfc\xad\x8f\x16\xbd\x8f\x56\xbb\xee\x28\xe5\xb0\xa2\x35\x25\xaf\x6e\xa6\xba\xca\x7c\x4c\x15\x17\xc1\x2f\x45\x35\xcf\xb6\xa6\x86\x05\xae\xc9\xfb\xf8\x5b\x5d\x3d\x53\xbb\x0a\x1e\x61\xa2\x89\x75\x0f\x6b\x31\xc7\x72\xa5\x08\xbd\x44\xe8\x44\xba\x04\xfc\x70\x12\x1f\x82\xe2\x86\x50\x17\xc7\x0f\x9b\x54\xa7\x52\x92\x35\x9c\xcd\xa2\xf5\x13\x40\xd7\x9c\x53\xac\xab\xcc\xbc\x87\x2f\x42\xb4\x57\x10\x1f\xe8\x47\x1f\x40\x2e\xa8\xd7\x0b\x8d\xaa\x30\x5d\x6f\xd6\x70\x3f\xa7\xfa\xa2\x5f\x59\x9a\xfe\xde\xbb\xa1\x44\xf1\xad\x4b\xda\x29\x1f\xcd\xc7\xaf\xc9\x27\xe5\x71\x49\x5f\xcb\xe4\x2d\x5c\xf9\xc8\xc0\xbd\x6e\x13\x96\x5f\xd6\x6b\x4f\x16\x4e\x2e\xe0\x3c\x0b\xcf\xa2\x2b\xab\x9a\xc9\xaa\x28\x75\x4f\x5d\x1a\xde\xc3\x37\x31\xaf\x60\xa1\xc6\xe6\xd7\xd0\x91\x94\x2f\x97\xdf\x59\x4d\xfa\x41\x9d\xfe\x7f\xbe\xb9\x8a\x8e\x47\xf3\xec\x86\xec\xe3\xc2\x2f\x27\x33\xd8\xae\xb6\x7e\x35\xc1\xdd\x06\x76\x23\xcf\x33\x75\x70\xef\x0e\x24\xbf\x69\x07\x32\x52\x62\xb1\x6f\xcc\xef\x59\x77\x1d\x0e\xe7\xf4\x3d\x4f\x4d\x47\xaf\xab\x7f\x2c\x11\xac\x65\x96\xcf\x82\xc1\x29\x99\xcd\x23\x5b\x0e\xd1\x75\x24\xe7\xf5\xea\xfc\x69\x05\xe4\x63\xb1\xb1\x83\x8b\x96\xa7\xf7\xba\x35\x1b\x8e\xd9\xf9\xce\xbc\xfb\xaf\x5e\x68\xec\xd7\xa5\xf8\xbf\x01\x00\x00\xff\xff\x2a\xa2\x17\xa2\xa7\x0f\x00\x00")

func dataPhrasesTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataPhrasesTxt,
		"data/phrases.txt",
	)
}

func dataPhrasesTxt() (*asset, error) {
	bytes, err := dataPhrasesTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/phrases.txt", size: 4007, mode: os.FileMode(438), modTime: time.Unix(1607797764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/phrases.txt": dataPhrasesTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"phrases.txt": &bintree{dataPhrasesTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
