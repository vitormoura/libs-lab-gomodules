// Code generated for package messages by go-bindata DO NOT EDIT. (@generated)
// sources:
// data/phrases.txt
package messages

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataPhrasesTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\x4d\x6f\xe3\x38\xd2\xbe\x1b\xf0\x7f\xa8\x39\xf5\x0c\xe0\x31\xf0\xbe\xc7\xcd\x61\x90\x38\xd3\x9d\xec\x26\x93\xde\x24\x8d\xc6\x1e\x4b\x52\x49\xaa\x35\xc5\xd2\x14\x49\x3b\x9a\x5f\xbf\x28\x52\x76\xcb\xe9\xc6\x62\x8f\x8e\x44\x8a\xf5\x54\x3d\x1f\xcc\x0d\xea\x9e\x7d\x07\x5f\x46\x78\xed\x09\xbe\xaa\xf8\x0e\x5e\x95\x68\xbd\x7a\x24\xf4\xec\xbb\xbf\xc1\xab\xc0\x80\x7b\x02\x84\x63\x7e\x8c\x21\xa4\x61\x8c\x2c\x1e\xb0\x92\x14\x21\xc8\x40\xb1\x67\xdf\x6d\xd7\xab\x3f\xe4\xd7\x1b\x45\xf6\xa4\x8b\x1d\xae\xfd\x94\x9f\x43\xec\x31\x82\xd2\x9f\x89\x95\x02\x0c\xec\x79\x40\x07\x95\x2d\x00\xac\x23\x1f\x38\x4e\x10\x05\xb0\xae\x65\x18\x1d\x87\x7e\xbb\x5e\xdd\xca\xd1\xdb\x21\x7e\x47\x8d\xfd\x62\xd7\xcf\x6a\x4b\x6a\x74\x20\x0a\x7d\x1a\x2a\x47\x57\x90\xfc\xa8\x14\xc9\x47\x96\x14\xb6\xeb\xd5\xd7\x9e\x3c\xc4\x9e\xe0\x39\x55\x15\x29\xdc\x71\x0c\xe5\xb7\x60\xb3\xd8\x2c\xbf\x77\x2e\x04\x38\xcc\xb5\x45\x81\x8a\x3a\xf6\x1b\xe8\x28\x42\x20\xb5\x7d\x37\xf6\xc5\xb1\x3c\xb5\xbd\x22\x85\xb8\x5d\xaf\x5e\x8e\xec\x3b\x5b\xfd\x51\x34\xff\xfd\x23\xf9\x9a\xc2\xe2\x2b\x9f\xf8\x60\xcf\xbf\x7d\x67\x92\xa4\x80\xce\x6d\xd7\xab\x3b\xc2\x26\xc0\x97\x71\xf1\xfa\x97\x40\x0d\x60\x00\xf4\x80\xcd\x01\x7d\x4d\x0d\x1c\x51\xed\xe1\xd6\x10\xa9\xa8\x96\x81\x60\x4f\xe4\xdd\x04\x78\x44\xa5\xed\x7a\xf5\xd9\xe1\x64\x7b\x7f\x16\x6b\xd4\x05\x60\x86\x4c\x93\x1b\x61\x8b\xa1\x21\x6c\x72\x2d\xa7\x9f\x35\x71\x6c\x93\xfb\x41\x5f\x6f\x92\x86\x08\xff\xb2\xe3\xde\xa4\xaa\x72\xef\x06\x44\x13\x17\xf8\xc4\xd3\x87\x00\x3d\x8e\xe3\x04\x83\x0c\xe4\x0d\x98\xaf\x36\x3e\x5f\x46\xd8\xa1\x73\x17\x63\x01\x52\xd7\x49\xad\x30\x90\x16\x82\x68\x6e\x0e\x46\xa8\x94\x7d\x17\x00\x61\x54\xa9\x1c\x0d\x76\x42\xdb\xbe\x92\x66\xfa\x10\x00\x63\x69\xb1\x07\xf4\x8d\x41\x3d\x81\x12\x3a\xfe\x8b\x80\x23\x78\xa2\x26\x40\xcb\x6f\xe5\xe8\x1f\x05\x07\xab\xf9\x3a\xe6\x19\x7f\x94\x74\x31\x46\x19\x47\x20\xaf\xd8\x19\xda\xbe\x81\xd0\xcb\x11\xd8\x0e\xfe\x2a\xa9\xeb\xe1\x3e\xc2\x53\x8a\xef\x0a\xa6\xc1\x86\x56\x29\xb0\x73\x4c\x3e\x02\x1d\xc8\x03\x7b\xe8\x51\x1b\x88\x3c\x50\xb8\x02\xf2\x4d\xd2\x72\x8a\xbb\x0c\x89\x35\x13\x76\x0e\x97\x6d\xb1\x43\x85\x88\x31\x63\x50\x91\x1d\x35\xe3\x77\x05\x2d\x91\xb3\x9f\x0d\x39\xee\xfa\x48\x4d\x66\x83\xff\x10\xe1\x41\x64\x0f\x08\x9f\xb8\x8d\x70\x27\x1a\x08\xee\xfd\x0f\xab\xcb\x73\x3d\x49\x02\xb5\xe6\x1e\x8c\xc5\x9d\x2d\x6a\x55\x86\x53\xc3\x36\xd0\x08\x78\x89\x86\x43\xf2\x9d\x62\xa4\x36\xd9\x48\x3e\xdb\x57\xe1\xa9\x6d\xf3\x34\xdf\xe0\x12\x83\xfb\x61\xa0\x86\x31\x92\x9b\x6c\xbd\x27\xab\x1d\xa1\x4f\xaa\xd3\x15\x1c\x39\xf6\x36\x42\x0d\x39\x9c\xb6\xeb\xd5\x3f\x13\xd7\x7b\x78\x2a\x54\xbc\x55\x3c\x2e\xc7\x92\xb4\x15\xcd\x2d\xc2\x22\x03\xe2\xf3\x06\xf9\xe5\x4e\x09\x8d\x5f\x06\x4e\x8f\x21\xda\x84\xdf\x71\xd7\xc3\xb5\x6f\xe0\x56\xa7\xef\x3a\xe9\xa8\xb5\x4a\x7a\xf6\xcd\x15\x60\x85\xde\x0e\xd7\x6c\xe1\x26\x23\x5b\x0e\x49\x6e\x74\x14\x02\x04\x8e\x09\xcf\xdf\xb3\x03\x23\x1c\x31\x4b\x90\x52\x2d\x07\xd2\x93\xfe\x18\xa5\x0d\xdf\x9d\x24\xbf\x84\xe1\xa5\x40\x68\x24\xfa\xc6\xea\x3c\xc2\x4e\x64\x1f\xce\xcc\x6a\xad\x8a\x42\x36\x4f\xa8\x6e\x82\x20\xdb\xf5\xea\x71\x82\x5d\x1a\xad\xb6\x57\xc2\xff\x69\x5b\xfb\x6b\xcb\xbe\x39\x6d\x8d\x9d\x12\x61\xe5\xf2\xbb\xf3\xa0\x94\xee\xdd\xaa\x8c\xa3\xad\x7b\xe0\x3d\xc1\x47\xc7\x17\x52\xf4\x2a\xd0\xa2\x73\xd0\x58\x75\xec\xdc\x2c\x03\x0d\xe7\x46\x3a\xd4\x8e\xc0\xa7\xa1\x22\x35\x19\x7d\xb4\xb2\x6d\xe0\x9f\x52\xee\x04\xc2\xa3\x38\xea\xf9\x82\xcf\x4f\x9e\xe0\xd8\x0b\x50\xa8\xd1\x59\xd3\x20\x0c\xf6\x89\x7c\xfa\x50\xa8\x9a\xd4\x67\xfd\x1d\x80\xbd\x15\xc0\xdd\x89\xe2\x21\x4b\x97\x18\x49\xb9\xde\x93\x0f\xf0\xab\x21\xbe\xd4\x8b\x45\xbf\x32\x16\x3d\x06\xe8\xc4\xb4\x20\x77\x6d\x10\xa5\x93\x44\x5b\x39\xec\x23\x29\x85\x98\x29\x94\x68\xee\xaa\x71\x35\xbb\x0b\xbd\x71\x64\x0a\x05\xb7\x03\x39\x19\x4d\xae\x42\xa6\xfd\x98\x87\xf4\xc2\xc4\xf2\xd0\xfd\x99\xd0\x71\x9c\x36\x40\x6f\x35\x65\x0f\x44\x77\xf5\xae\x45\x1f\x02\x1c\x48\x27\x38\xa0\x4b\xd6\x98\xd3\x08\xd9\xc0\x5e\xea\xc8\xcf\xff\xf7\x0b\x5c\x43\x24\x1d\x20\x99\xd4\xe7\xe1\xac\x24\xeb\x16\xfc\xfc\xff\xbf\x9c\xc7\xc0\x50\xb5\x62\x67\xc1\x67\x5f\xe3\x88\x35\x9b\x68\x34\x67\x76\x19\xbe\xb7\xac\xf1\x82\x12\x05\xfa\x8c\x16\xaa\x4d\xce\x9b\x79\x88\x91\x2b\x13\x0b\xc2\x48\x36\x96\x95\x8d\xbe\x69\x93\x52\x48\x2e\x6e\x80\xad\x0c\xeb\x0c\x56\x6e\xca\xe2\xd0\xc9\x6c\x1c\x47\xd1\x7d\xa9\xf0\x48\xd9\xb9\xfe\x8e\xc7\x60\x43\xf1\xc0\x2d\x5d\xb8\x57\x42\xe7\x26\x6b\x7f\x00\xa5\x96\x34\xdb\x21\x20\x44\x11\x57\x2a\xae\x4c\xb8\x43\x9d\x48\x03\x1c\x67\xab\x9e\x60\xd4\xc9\xba\x52\xdb\xac\x8d\x64\xa0\xd4\x98\xa7\x33\xe0\x81\xb2\x2a\x98\x6f\x8c\x98\xcd\xe5\x1a\x3e\x33\x15\x03\xd9\xe1\xfe\x72\x5e\x22\x86\x7d\x29\x9e\x8d\xec\xd6\xf4\xef\xe2\xc5\xef\xb9\x94\x9d\x93\xd4\xc0\x5d\xc6\xe0\x85\xdd\x81\x14\x1e\xd8\xb6\xf9\x4e\x5f\x64\x8c\x3c\x70\x88\x5c\x6f\xce\x9a\xdf\x70\xdb\x72\x9d\x9c\x8b\x45\xf9\xb7\xeb\xd5\x2e\x45\x5b\x90\x35\xa3\xc7\xf0\xce\x2f\x2d\x4c\xcc\xe1\x61\x14\xf6\x71\x03\x8e\x30\x67\x83\x2c\x42\x46\xc7\x22\xba\xc9\x7b\xaa\x29\x04\xd4\x09\x1a\x8a\xc8\xce\x36\x7f\xa0\x08\x77\xa4\xf0\xcc\xe3\xa5\x90\x0e\x1c\x42\xa6\x87\x98\xa5\x68\xcc\x82\xc3\x36\xf0\xc9\x35\x30\x10\x7a\xf8\xd0\x19\xf3\x43\x24\xfd\xe9\xc3\x7a\xf5\x19\xf5\x1c\x57\x76\x92\xf4\xe2\xa0\x5f\x0d\x39\x33\x8f\x63\x5e\x4e\x6f\x23\xd5\xf9\xdc\xe6\x4f\xe4\x97\x83\xef\x45\x87\x92\xc4\x6a\x19\x06\xf1\x73\xa0\x81\x27\x43\xf2\x8e\xc8\x2d\xb5\xe7\x23\xba\xd9\xd7\x68\x74\x53\xd6\x1b\x39\x50\x19\x4b\xf4\x12\x7b\x52\x18\x49\x43\xde\xe6\x19\x73\x1f\x60\x87\xb1\x68\xc8\xad\x74\xe1\xbd\xc3\x71\xee\xb0\xce\xaf\xf6\x86\xa5\x9b\x8a\x6e\xc5\xfe\xd7\x23\x46\xd2\xcb\x5e\xde\x92\xe3\xda\x84\xe2\x3d\x7b\x67\xdd\x36\x48\x0c\xa4\x00\x56\x6a\xe4\xbf\x8a\x8b\xef\x74\x2a\x25\xbd\x8c\xec\x22\x3c\xb2\xdb\x2f\x3d\xd1\x48\x93\x02\x65\x6f\x29\x4c\xd1\xe9\x14\x24\x17\x4c\x04\x74\x4a\xd8\x4c\x33\x8e\x73\xec\xa8\xd1\xcf\x26\x5c\xf7\xe8\xbb\xcc\xec\x6b\x0f\xd7\x3a\xe4\xc7\x08\x0f\xd4\xbd\xb3\x88\xc5\xb1\x39\x00\xbd\x45\xa5\x81\xdc\x94\x3b\xe5\x03\x1f\x4c\x7b\x7e\x77\x34\xf6\xe8\xa3\xc1\x5c\x82\xaf\x2c\xd3\xc7\x7d\xe7\x45\xb3\xf7\x16\xd1\xdf\x80\x54\x87\xac\xa0\xa7\xe8\x25\x0a\x2d\xb2\x9b\xd9\x8f\x4d\xa3\x56\x1e\x7a\xe0\x10\x4c\x55\xed\xeb\x21\xa2\x59\x92\x15\x9a\x45\x6c\xc0\x7f\x8b\x9a\x28\xe7\x2b\x01\xdc\xb7\x61\x63\xfa\x57\x92\xf3\x4d\x8a\x17\xd3\xc0\x9e\x43\x5f\x8e\x90\x09\x7b\xf2\xe2\x01\xf7\x25\x14\x58\x41\x75\x0a\x99\x57\xcf\xdc\x10\xdc\xf1\xb0\x81\x9d\x1c\x2b\x99\x7e\xba\x20\x7c\xdd\x53\x9e\x1d\x31\xa6\x4f\xe4\xdc\x06\xd2\x2c\x43\x76\xf3\x90\x86\x64\x16\x9a\x3a\xaf\x0e\x59\x15\x6b\x37\x07\xf7\x99\x92\x15\xd6\xfb\xac\x68\x66\x7a\x03\x35\xd0\x5b\xc4\xca\x06\x25\x66\xa5\xc9\xc3\xf5\x52\xc7\x1f\xcb\x41\xdb\xe4\x4b\x8c\x3d\x35\x66\x76\x6f\xf1\x74\x05\xca\x8d\x29\x84\x75\xe4\xa5\x97\x68\x79\x2d\x67\x21\xd4\xfd\x65\x24\xb6\x6c\x3b\x8c\xf1\x9b\xc3\x39\x8e\xd1\x95\xa1\xa8\x09\x5a\xdb\x34\xd5\xa6\x09\xdb\xf5\xea\x93\x64\xf6\xde\xa8\xec\xdf\x27\x72\x0e\x7b\xa3\x05\x1a\x06\x45\xa7\x5a\xfb\x6d\x1a\x10\xc0\x49\xb0\x03\x92\x69\x5f\x89\xf8\x59\x95\xa4\x48\x4f\x8a\x8b\x6b\x84\xed\xff\x0f\xa2\x71\xd9\xb2\x17\xe4\xe6\xa4\xd7\xc5\xdb\x95\xbe\x5d\x98\x16\x37\xa5\x99\x32\x5f\xc5\xb5\x3f\x48\x37\xb9\xc4\x1a\x9d\x0b\xb9\x2c\x8b\x65\x65\xd7\x42\x67\x63\x83\x65\x79\x4b\x6f\x4b\x27\xe4\x00\x6e\x2a\x7c\x7c\xce\xc1\xde\x4f\x70\x43\xce\x85\xdf\x16\xdf\x78\xa6\x7a\x56\x19\x84\x81\x06\xb1\x54\x5a\x63\x0a\xe5\x2f\x45\x5d\x4a\x22\x18\xc8\x52\xce\x0f\xdb\xb6\x30\xb7\x5b\xc2\x8b\x60\xbd\x88\x93\x8d\xb1\x55\xe7\xd0\x91\xdd\xc4\x2e\x56\x16\xf1\x4e\x71\xc5\x98\xec\x1c\x7c\x52\xa2\xbd\x01\xfd\x48\xff\xf5\xea\xc9\xde\xfc\x49\xa9\x37\x12\x5b\xb4\x9b\xd3\xcb\x39\xb6\x4c\x76\xd1\xb5\x78\xe3\x1c\x77\x25\x62\xdc\x71\x34\x10\xe4\x98\x2d\xe7\x86\x5c\xbc\x20\x46\x49\x15\x39\x6b\x6c\xe1\xda\x05\x01\x69\x2d\x37\x65\x17\xce\x30\xb4\x94\x2d\x96\x3d\x8e\xa3\xca\xa8\x96\xed\x4d\xc1\x66\xd2\x9a\xac\x5b\x3c\xfa\x96\x25\xa2\xc8\x8c\x23\x5a\x0a\xf8\xe2\x1b\xd2\x72\x43\xfc\x43\x2e\x6c\xe4\xd1\x4c\xe9\xe2\xda\x5b\x34\xa3\xcf\xae\x52\x51\xbe\xbb\xb9\xe9\x24\x3c\xf9\xd6\x8e\x11\xae\x07\xb8\xdf\xc0\xae\x97\x71\xa4\x06\x1e\xf8\x40\xfa\xdb\x45\x4d\xda\x53\x14\xcd\xff\x01\xf8\x33\x59\xce\x13\x7f\x4e\x15\xe7\x16\xdb\xc0\xd8\x3d\x2a\x94\x68\x61\x07\x2f\x77\xac\x8e\x8d\x14\x59\xaa\x6b\xf1\x81\x1b\xd2\x73\xb4\x3c\xdf\x65\x81\x5c\x28\x22\x7a\xe0\x90\xe3\xc1\x83\x5d\x2f\x32\xc4\x89\x5d\x73\x69\x2a\xdf\x4b\x72\xa6\x93\x5d\x23\xfe\x13\x00\x00\xff\xff\x40\x28\xb7\xce\x69\x11\x00\x00")

func dataPhrasesTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataPhrasesTxt,
		"data/phrases.txt",
	)
}

func dataPhrasesTxt() (*asset, error) {
	bytes, err := dataPhrasesTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/phrases.txt", size: 4457, mode: os.FileMode(438), modTime: time.Unix(1607787925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/phrases.txt": dataPhrasesTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"phrases.txt": &bintree{dataPhrasesTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
